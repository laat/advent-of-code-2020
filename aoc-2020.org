#+title: Advent Of Code 2020

Using [[https://orgmode.org/][org-mode]] and Emacs Lisp to solve Advent of Code.

* Day 1

#+begin_src emacs-lisp
  (defun laat/aoc-read-numbers-file (filePath)
    "read file as a list of newline separated numbers"
    (with-temp-buffer
      (insert-file-contents filePath)
      (mapcar 'string-to-number (split-string (buffer-string) "\n" t))))
#+end_src

** Part 1

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun laat/aoc-1-1 (xs)
    (apply '* (cl-intersection (mapcar (lambda (arg) (- 2020 arg)) xs) xs)))

  (laat/aoc-1-1 (laat/aoc-read-numbers-file "1-1.txt"))
#+end_src

** Part 2

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun laat/aoc-1-2 (xs)
    (apply '* (car
               (cl-remove-if
                (lambda (x) (not (equal (apply '+ x) 2020)))
                (mapcan
                 (lambda (a)
                   (mapcan
                    (lambda (b)
                      (mapcar
                       (lambda (c) (list a b c)) xs)) xs)) xs)))))

  (laat/aoc-1-2 (laat/aoc-read-numbers-file "1-1.txt"))
#+end_src

* Day 2

#+begin_src emacs-lisp
  (defun laat/aoc-read-passwords-line (line)
    (let* ((parts (split-string line ": "))
           (rule-parts (split-string (car parts) " "))
           (min-max (mapcar 'string-to-number (split-string (car rule-parts) "-")))
           (min (car min-max))
           (max (nth 1 min-max))
           (character (car (last rule-parts)))
           (password (string-join (cdr parts) " ")))
      (list
       :min min
       :max max
       :character character
       :password password)))

  (defun laat/aoc-read-passwords-file (filePath)
    (mapcar 'laat/aoc-read-passwords-line
            (with-temp-buffer
              (insert-file-contents filePath)
              (split-string (buffer-string) "\n" t))))
#+end_src

** Part 1

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun laat/aoc-2-1-is-passowrd-valid-p (line)
    (let* ((character (plist-get line :character))
           (max (plist-get line :max))
           (min (plist-get line :min))
           (password (plist-get line :password))
           (occurances (- (length (split-string password character)) 1)))
      (and (<= min occurances) (>= max occurances))))

  (length
   (cl-remove-if-not
    'laat/aoc-2-1-is-passowrd-valid-p
    (laat/aoc-read-passwords-file "2-1.txt")))

#+end_src

** Part 2

#+begin_src emacs-lisp
  (require 'cl-lib)

  (defun laat/aoc-2-2-is-passowrd-valid-p (line)
    (let* ((character (plist-get line :character))
           (a (- (plist-get line :min) 1))
           (b (- (plist-get line :max) 1))
           (password (plist-get line :password))
           (a-is-char-p (equal character (substring password a (+ a 1))))
           (b-is-char-p (equal character (substring password b (+ b 1)))))
      (xor a-is-char-p b-is-char-p)))

  (length
   (cl-remove-if-not
    'laat/aoc-2-2-is-passowrd-valid-p
     (laat/aoc-read-passwords-file "2-1.txt")))
#+end_src

* Day 3

** Part 1

#+begin_src emacs-lisp
  (defun laat/aoc-read-forest (filePath)
    (mapcar
     (lambda (line)
       (let ((trees (mapcar (lambda (c) (if (equal ?# c) 1 0)) line)))
         (nconc trees trees))) ;; circular list
     (with-temp-buffer
       (insert-file-contents filePath)
       (split-string (buffer-string) "\n" t))))
#+end_src

#+begin_src emacs-lisp
  (apply '+
         (seq-map-indexed (lambda (trees i) (nth (* i 3) trees))
                          (laat/aoc-read-forest "3-1.txt")))
#+end_src

** Part 2

#+begin_src emacs-lisp
  (defun laat/aoc-count-slope (down right)
    (apply '+ (seq-map-indexed
               (lambda (trees i) (if (eq (% i down) 0) (nth (* (/ i down) right) trees) 0))
               (laat/aoc-read-forest "3-1.txt"))))

  (apply '* (mapcar
             (lambda (slope)
               (let ((down (car slope)) (right (nth 1 slope)))
                 (laat/aoc-count-slope down right)))
             '((1 1) (1 3) (1 5) (1 7) (2 1))))
#+end_src

